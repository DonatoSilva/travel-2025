---
import Modal from "@components/Modal.astro";
import { firebase } from "src/firebase/config";
import { PreViewImagesContent } from "./PreViewImagesContent";
import Button from "@components/Button.astro";

const userCurrent = firebase.auth.currentUser;
---

<Modal
    id="addMemoryModal"
    title="Crea un recuerdo para siempre"
    description={` ‚ú®ü•≥ Felicidades ${userCurrent?.displayName}, estas a poco de publicar tu primer recuerdo de la travel-2025. ¬øListo para compartirlo ü§î? `}
>
    <form class="flex flex-col gap-8">
        <div class="headerForm">
            <div class="flex flex-row items-end gap-4">
                <label for="title" class="flex-1">
                    Titulo
                    <input
                        id="title"
                        type="text"
                        name="title"
                        placeholder="Titulo"
                    />
                </label>
                <Button
                    className="max-h-min disabled:opacity-80 disabled:cursor-progress"
                    type="summit"
                    id="btnAddMemory"
                >
                    Guardar
                </Button>
            </div>
            <label for="description">
                Descripci√≥n
                <textarea
                    id="description"
                    name="description"
                    placeholder="Descripci√≥n (Opcional)"></textarea>
            </label>
        </div>
        <PreViewImagesContent client:load />
    </form>
</Modal>

<style>
    .headerForm {
        display: flex;
        flex-direction: column;
        @apply gap-4;

        label {
            display: flex;
            color: transparent;
            flex-direction: column;
            transition: color 0.2s ease-in-out;
            @apply gap-1;

            input,
            textarea {
                &:focus {
                    outline: none;
                    border-radius: 0.5rem;
                    @apply border border-orange-200 bg-white text-black;

                    &::placeholder {
                        color: transparent;
                    }
                }

                &::placeholder {
                    @apply text-orange-300;
                }

                border-bottom: 3px solid #fed7aa;
                background-color: transparent;
                color: #000;

                padding: 0.5rem;
                transition:
                    border-radius 0.2s ease-in-out,
                    border 0.2s ease-in-out,
                    background-color 0.2s ease-in-out,
                    color 0.2s ease-in-out;
            }

            textarea {
                resize: none;
                height: 5rem;
            }
        }

        label:focus-within {
            color: #000;
            font-weight: 500;

            input,
            textarea {
                font-weight: 400;
            }
        }
    }
</style>

<script>
    import type {
        AlbumPreView,
        ImageBackEnd,
        ImageFrontEnd as Image,
        Memory,
    } from "@/interfaces";
    import { addImgStore } from "@/store/memory/addStore";
    import { showNotify } from "@/utils/popsNotification";
    import { actions } from "astro:actions";
    import { createRoot } from "react-dom/client";
    import ButtonLike from "../buttons/ButtonCardLike";
    import React from "react";
    import { chunkImage } from "@/utils/chunkImage";
    import type { array } from "astro:schema";
    import type { allTasks } from "nanostores";

    const modal = document.getElementById(
        "addMemoryModal",
    ) as HTMLDialogElement;
    const fileInput = document.getElementById("file-input") as HTMLInputElement;
    const btnAddMemory = document.getElementById(
        "btnAddMemory",
    ) as HTMLButtonElement;
    const title = document.getElementById("title") as HTMLInputElement;
    const description = document.getElementById(
        "description",
    ) as HTMLTextAreaElement;
    const templateCardAlbum = document.getElementById(
        "templateCardAlbum",
    ) as HTMLTemplateElement;

    const updateDOM = (data: AlbumPreView) => {
        const ContentAlbums = document.querySelector(
            ".bodyGalery",
        ) as HTMLDivElement;
        const clone = templateCardAlbum.content.cloneNode(
            true,
        ) as DocumentFragment;
        const cardAlbumCustomElement = clone.querySelector(
            "card-album",
        ) as HTMLElement;
        const aElement = cardAlbumCustomElement.querySelector(
            "a",
        ) as HTMLAnchorElement;
        const swiprWrapper = cardAlbumCustomElement.querySelector(
            ".swiper-wrapper",
        ) as HTMLElement;
        const userPerfil = cardAlbumCustomElement.querySelector(
            ".UserPerfil",
        ) as HTMLElement;
        const userPerfilName = cardAlbumCustomElement.querySelector(
            ".userPerfilName",
        ) as HTMLElement;
        const userPerfilImg = cardAlbumCustomElement.querySelector(
            "img",
        ) as HTMLImageElement;
        const cardAlbumText = cardAlbumCustomElement.querySelector(
            ".card-Album-text",
        ) as HTMLParagraphElement;
        const noAlbumsMessage = document.getElementById(
            "noAlbumsMessage",
        ) as HTMLDivElement;
        const cardFooter = cardAlbumCustomElement.querySelector(
            "card-album-footer",
        ) as HTMLElement;

        if (
            !cardAlbumCustomElement ||
            !cardAlbumText ||
            !swiprWrapper ||
            !userPerfil ||
            !userPerfilName ||
            !userPerfilImg
        )
            return;

        if (typeof document.startViewTransition === "function")
            cardAlbumCustomElement.style.viewTransitionName = `comment-${data.id}`;

        const { user, photos, description } = data;

        const templateNoDescription = () => {
            return `<span class="text-gray-400 border-l ps-2 border-gray-400">
                        Sin descripci√≥n
                    </span>`;
        };
        const templatImgSwiper = (img: ImageBackEnd) => {
            return `<div class="swiper-slide">
                        <img src="${img.url}" alt="${img.alt}" />
                    </div>`;
        };

        cardAlbumCustomElement.classList.add("cardIn");
        cardFooter.dataset.id = data.id;
        swiprWrapper.innerHTML = photos
            .map((img) => templatImgSwiper(img))
            .join("");

        cardAlbumText.innerHTML = description
            ? description
            : templateNoDescription();

        userPerfilName.textContent = user.name;
        userPerfilImg.src = user.imgUrl;

        aElement.href = `/album/${data.id}`;
        cardAlbumCustomElement.setAttribute("data-album-id", data.id);

        ///agregar componente de react por medio de reactDOM.Render
        const root = createRoot(
            cardAlbumCustomElement.querySelector("#btnLikes")!,
        );
        root.render(
            React.createElement(ButtonLike, {
                albumId: data.id,
                likeValue: data.likes,
                isLiked: false,
            }),
        );

        if (ContentAlbums.children.length > 1) {
            ContentAlbums.insertBefore(
                cardAlbumCustomElement,
                ContentAlbums.children[1],
            );
        } else {
            ContentAlbums.append(cardAlbumCustomElement);
            noAlbumsMessage.remove();
        }
    };

    const addCardAlbum = (data: AlbumPreView) => {
        if (document.startViewTransition) {
            document.startViewTransition(() => updateDOM(data));
        } else {
            updateDOM(data);
        }
    };

    // Modified click handler for btnAddMemory
    btnAddMemory?.addEventListener("click", async (e) => {
        e.preventDefault();

        const titleValue = title.value.trim();
        const descriptionValue = description.value.trim();

        if (titleValue === "") {
            title.value = "";
            title.focus();
            alert("Por favor, ingresa un t√≠tulo para esta memoria.");
            return;
        }

        title.disabled = true;
        description.disabled = true;
        btnAddMemory.disabled = true;
        btnAddMemory.textContent = "Guardando...";

        try {
            // Collect image files and descriptions
            const imgContainers = modal.querySelectorAll(".img-container");
            const imageFiles: File[] = [];
            const imageDescriptions: string[] = [];

            imgContainers.forEach((imgContainer, key) => {
                const p = imgContainer.querySelector(
                    "p",
                ) as HTMLParagraphElement;

                if (!p) return;

                const pIsEmpty = p.dataset.isempty;
                const imgFile = addImgStore.get()[key];
                const imgDescription = pIsEmpty ? "" : p.textContent!;

                if (imgFile) {
                    imageFiles.push(imgFile);
                    imageDescriptions.push(imgDescription);
                }
            });

            // Upload all images in parallel
            showNotify("Subiendo im√°genes...");
            const maxFileSize = 3 * 1024 * 1024; // 3MB in bytes

            const imageUploadPromises = imageFiles.map(async (file) => {
                const numberOfChunks = Math.ceil(file.size / maxFileSize);

                const chunkSize = Math.ceil(file.size / numberOfChunks);

                const imageFragments: ArrayBuffer[] =
                    await chunkImage.divideImageInChunks(file, chunkSize);

                const uploadPromises = imageFragments.map(
                    async (fragment, index) => {
                        const formData = new FormData();

                        formData.append("chunk", new Blob([fragment]));
                        formData.append("filename", file.name.split(".")[0]);
                        formData.append("type", file.type);
                        formData.append("chunkIndex", index.toString());
                        formData.append(
                            "totalChunks",
                            imageFragments.length.toString(),
                        );

                        const { data, error } =
                            await actions.Memory.uploadImage(formData);

                        if (error || !data) {
                            throw new Error(
                                error?.message || "Error al subir la imagen",
                            );
                        }

                        return data.body.imageUrl ?? "";
                    },
                );

                const imageUrl = await Promise.all(uploadPromises);
                return imageUrl[imageUrl.length - 1];
            });

            const imageUrls = await Promise.all(imageUploadPromises);

            if (
                imageUrls.length !== imageFiles.length ||
                imageUrls.some((url) => !url)
            ) {
                showNotify("Error al subir todas las im√°genes.");
                title.disabled = false;
                description.disabled = false;
                btnAddMemory.disabled = false;
                btnAddMemory.textContent = "Guardar";
                return;
            }

            // Now send the memory data with image URLs
            showNotify("Guardando memoria...");
            const { data, error } = await actions.Memory.addMemory({
                title: titleValue,
                description: descriptionValue,
                imageUrls: imageUrls as string[],
                imgDescription: imageDescriptions,
            });

            if (error) {
                console.error(error);
                showNotify(`Error üò•üòî: ${error.message}`);
                title.disabled = false;
                description.disabled = false;
                btnAddMemory.disabled = false;
                btnAddMemory.textContent = "Guardar";
                return;
            }

            if (data.status != 200) {
                showNotify(
                    "Error üò•üòî: al mostrar el √°lbum despu√©s de su creaci√≥n",
                );
                console.log(data);

                title.disabled = false;
                description.disabled = false;
                btnAddMemory.disabled = false;
                btnAddMemory.textContent = "Guardar";
                return;
            }

            title.disabled = false;
            description.disabled = false;
            btnAddMemory.disabled = false;
            btnAddMemory.textContent = "Guardar";
            modal?.close();
            showNotify("Memoria agregada con √©xito.");
            addCardAlbum(data.body.albumData!);
        } catch (error) {
            console.error(error);
            showNotify(
                `Error: ${error instanceof Error ? error.message : "Error desconocido"}`,
            );
            title.disabled = false;
            description.disabled = false;
            btnAddMemory.disabled = false;
            btnAddMemory.textContent = "Guardar";
        }
    });

    // Existing event listeners
    title.addEventListener("blur", () => {
        if (title.value.trim() === "") {
            title.value = "";
        }
    });

    description.addEventListener("blur", () => {
        if (description.value.trim() === "") {
            description.value = "";
        }
    });

    modal?.addEventListener("close", (e) => {
        fileInput.value = "";
        title.value = "";
        description.value = "";

        addImgStore.set({} as FileList);
    });
</script>
